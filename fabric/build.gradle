plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
	}
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:21.1.3"
    modImplementation include("fuzs.extensibleenums:extensibleenums-fabric:21.1.1")
}

loom {
	def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
	if (aw.exists()) {
		accessWidenerPath.set(aw)
	}
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}
	runs {
		client {
			client()
			setConfigName('Fabric Client')
			ideConfigGenerated(true)
			runDir('runs/client')
		}
		server {
			server()
			setConfigName('Fabric Server')
			ideConfigGenerated(true)
			runDir('runs/server')
		}
        commonData {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=simplemusket"
            ideConfigGenerated(true)
			runDir ('build/datagen')
		}
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

processResources {
	from project(":common").sourceSets.main.resources
	exclude '.cache'
}